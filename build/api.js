!function(){"use strict";const t=(t,n)=>({baseUrl:t,nonce:n}),n=t=>{let n={"Content-Type":"application/json"};return"string"!=typeof t&&null!=t.nonce&&(n["X-WP-Nonce"]=t.nonce),n},e=function(t,n){let e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,o="";return null!=e&&Array.from(e.entries()).length&&(o=`?${e}`),`${"string"==typeof t?t:t.baseUrl}${n}${o}`},o=t=>new URLSearchParams(t),r=function(t,o){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new URLSearchParams;return fetch(e(t,o,r),{headers:n(t)}).then((t=>t.json()))},c=function(t,o){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return fetch(e(t,o),{method:"PATCH",headers:n(t),body:JSON.stringify(r)}).then((t=>t.json()))};function s(n,e){const s=async()=>t(n.rest_base,await e.getNonce());async function a(t){const{reaction:e,postId:o=n.post_id,postType:r=n.post_type,operation:a,authenticated:i=!1}=t;try{if(null==o)throw new Error("Reaction: Missing post id");if(null==r)throw new Error("Reaction: Missing post type");return(await c(await s(),`/${r}/${o}`,{authenticated:i,reaction:e,operation:a})).succes}catch(t){console.error(t)}return!1}return{async fetchReactions(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const{postId:e=n.post_id,postType:c=n.post_type,ignoreCache:s=!1}=t;try{if(null==e)throw new Error("Reaction: Missing post id");if(null==c)throw new Error("Reaction: Missing post type");const t=await r(n.rest_base,`/${c}/${e}`,o(s?{cacheBuster:Date.now()}:{}));return new Map(t.map((t=>[t.reaction,t.count])))}catch(t){console.error("ERROR",t)}return new Map},async incrementReaction(t){return a({...t,operation:"increment"})},async decrementReaction(t){return a({...t,operation:"decrement"})},async fetchCommentsReactions(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};const{postId:e=n.post_id,postType:c=n.post_type,ignoreCache:a=!1,onlyCurrentUser:i=!1}=t,u=new Map;try{if(null==e)throw new Error("Reaction: Missing post id");if(null==c)throw new Error("Reaction: Missing post type");const t={};a&&(t.cacheBuster=!0),i&&(t.onlyCurrentUser=!0);const l=o(t);(await r(i?await s():n.rest_base,`/${c}/${e}/comments`,l)).forEach((t=>{u.has(t.id)||u.set(t.id,new Map),u.get(t.id).set(t.reaction,t.count)}))}catch(t){console.error(t)}return u}}}function a(o,s){const a=async()=>t(o.rest_base,await s.getNonce());return{async fetchReactions(t){const{commentId:n,onlyCurrentUser:e=!1}=t,c=new Map;try{(await r(e?await a():o.rest_base,`/comment/${n}`)).forEach((t=>{c.set(t.reaction,t.count)}))}catch(t){console.error(t)}return c},async setReaction(t){const{commentId:n,reaction:e,unique:o}=t;try{const t=await a();return(await c(t,`/comment/${n}`,{reaction:e,unique:o})).success}catch(t){console.error(t)}return!1},async unsetReaction(t){const{commentId:o,reaction:r}=t;try{return(await function(t,o){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return fetch(e(t,o),{method:"DELETE",headers:n(t),body:JSON.stringify(r)}).then((t=>t.json()))}(await a(),`/comment/${o}`,{reaction:r})).success}catch(t){console.error(t)}return!1}}}window.Reaction.controller=function(t){const n=function(t){const n=async()=>{const n=await(async()=>{const n=t.get_nonce_url;if(null==n)throw"Missing get_nonce_url";return(await fetch(n,{credentials:"include"})).text()})();return(n=>{t.rest_nonce=n})(n),n};return{async getNonce(){return null!=t.rest_nonce?t.rest_nonce:n()},updateNonce:n}}(t);return{nonce:n,post:s(t,n),comment:a(t,n),term:{}}}(window.Reaction.config)}();